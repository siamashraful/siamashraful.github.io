/*! Simplified Lunr.js compatible interface for static search */
(function(root, factory){
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = factory();
  } else {
    root.lunr = factory();
  }
})(this, function(){
  function sanitize(str) {
    return String(str || '').toLowerCase();
  }

  function Builder(){
    this._ref = 'id';
    this._fields = [];
    this._documents = [];
  }

  Builder.prototype.ref = function(field){
    this._ref = field;
  };

  Builder.prototype.field = function(field){
    if (this._fields.indexOf(field) === -1) {
      this._fields.push(field);
    }
  };

  Builder.prototype.add = function(doc){
    this._documents.push(Object.assign({}, doc));
  };

  Builder.prototype.build = function(){
    var refKey = this._ref;
    var fields = this._fields;
    var docs = this._documents.map(function(doc){
      var text = fields.map(function(field){
        return sanitize(doc[field]);
      }).join(' ');
      return {
        ref: doc[refKey],
        text: text,
        tokens: text.split(/[^\w]+/).filter(Boolean)
      };
    });

    return {
      search: function(query){
        if (!query) return [];
        var normalized = sanitize(query).replace(/\*/g, ' ').trim();
        if (!normalized) return [];
        var terms = normalized.split(/\s+/).filter(Boolean);
        var results = [];
        docs.forEach(function(doc){
          var score = 0;
          for (var i = 0; i < terms.length; i++) {
            var term = terms[i];
            if (!term) continue;
            var matched = doc.tokens.some(function(token){
              return token.indexOf(term) === 0 || token.includes(term);
            });
            if (!matched) {
              score = 0;
              break;
            }
            score += term.length;
          }
          if (score > 0) {
            results.push({ ref: doc.ref, score: score });
          }
        });
        results.sort(function(a, b){ return b.score - a.score; });
        return results;
      }
    };
  };

  function lunr(config){
    var builder = new Builder();
    if (typeof config === 'function') {
      config.call(builder);
    }
    return builder.build();
  }

  lunr.Builder = Builder;
  lunr.version = '2.3.9-lite';

  return lunr;
});
